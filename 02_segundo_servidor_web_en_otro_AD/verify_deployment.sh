#!/bin/bash

# Script de verificaci√≥n autom√°tica para LESSON2
# Verifica que ambos servidores web est√©n funcionando correctamente

echo "üîç VERIFICANDO DESPLIEGUE LESSON2 - M√öLTIPLES AD"
echo "================================================"

# Obtener IPs desde Terraform
echo "üìã Obteniendo IPs de los servidores..."
WEBSERVER1_IP=$(terraform output -json | jq -r '.EnterpriseWebserver_Public_IPs_Formatted.value.EnterpriseWebServer1')
WEBSERVER2_IP=$(terraform output -json | jq -r '.EnterpriseWebserver_Public_IPs_Formatted.value.EnterpriseWebServer2')

echo "üåê WebServer1 IP: $WEBSERVER1_IP"
echo "üåê WebServer2 IP: $WEBSERVER2_IP"
echo ""

# Funci√≥n para verificar servidor
verify_server() {
    local server_name=$1
    local server_ip=$2
    
    echo "üîç Verificando $server_name ($server_ip)..."
    
    # Verificar conectividad SSH
    echo "  üì° Probando SSH..."
    if ssh -i id_rsa_enterprise -o ConnectTimeout=10 -o StrictHostKeyChecking=no ubuntu@$server_ip "echo 'SSH OK'" 2>/dev/null; then
        echo "  ‚úÖ SSH: OK"
    else
        echo "  ‚ùå SSH: FAILED"
        return 1
    fi
    
    # Verificar servicio Apache
    echo "  üåê Probando Apache..."
    if ssh -i id_rsa_enterprise -o StrictHostKeyChecking=no ubuntu@$server_ip "sudo systemctl is-active apache2" 2>/dev/null | grep -q "active"; then
        echo "  ‚úÖ Apache: OK"
    else
        echo "  ‚ùå Apache: FAILED"
        return 1
    fi
    
    # Verificar respuesta HTTP
    echo "  üåç Probando HTTP..."
    if curl -s -o /dev/null -w "%{http_code}" http://$server_ip | grep -q "200"; then
        echo "  ‚úÖ HTTP: OK"
    else
        echo "  ‚ùå HTTP: FAILED"
        return 1
    fi
    
    # Verificar contenido de la p√°gina
    echo "  üìÑ Verificando contenido..."
    if curl -s http://$server_ip | grep -q "VICTORIA FINAL"; then
        echo "  ‚úÖ Contenido: OK"
    else
        echo "  ‚ùå Contenido: FAILED"
        return 1
    fi
    
    echo "  üéâ $server_name: TODAS LAS VERIFICACIONES PASARON"
    return 0
}

# Verificar ambos servidores
echo "üöÄ INICIANDO VERIFICACIONES..."
echo ""

WEBSERVER1_OK=false
WEBSERVER2_OK=false

if verify_server "WebServer1" "$WEBSERVER1_IP"; then
    WEBSERVER1_OK=true
else
    echo "‚ö†Ô∏è  WebServer1 necesita atenci√≥n"
fi

echo ""

if verify_server "WebServer2" "$WEBSERVER2_IP"; then
    WEBSERVER2_OK=true
else
    echo "‚ö†Ô∏è  WebServer2 necesita atenci√≥n"
fi

echo ""
echo "üìä RESUMEN DE VERIFICACI√ìN:"
echo "============================"

if [ "$WEBSERVER1_OK" = true ] && [ "$WEBSERVER2_OK" = true ]; then
    echo "üéâ ¬°√âXITO TOTAL! Ambos servidores funcionan correctamente"
    echo "‚úÖ Redundancia Multi-AD: FUNCIONANDO"
    echo "‚úÖ Alta Disponibilidad: GARANTIZADA"
    echo "‚úÖ LESSON2: COMPLETAMENTE EXITOSA"
    exit 0
elif [ "$WEBSERVER1_OK" = true ]; then
    echo "‚ö†Ô∏è  WebServer1: OK | WebServer2: PROBLEMAS"
    echo "üîß Ejecutar: ansible-playbook -i inventory_webserver2 playbook.yml"
    exit 1
elif [ "$WEBSERVER2_OK" = true ]; then
    echo "‚ö†Ô∏è  WebServer1: PROBLEMAS | WebServer2: OK"
    echo "üîß Ejecutar: ansible-playbook -i inventory_webserver1 playbook.yml"
    exit 1
else
    echo "‚ùå AMBOS SERVIDORES TIENEN PROBLEMAS"
    echo "üîß Revisar logs y ejecutar Ansible manualmente"
    exit 2
fi 